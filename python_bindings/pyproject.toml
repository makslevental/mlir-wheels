[build-system]
# this doesn't actually do anything because we do CIBW_BUILD_FRONTEND="pip; args: --no-build-isolation"
requires = [
    "PyYAML>=6.0.2",
    "cmake>=3.12",
    "nanobind>=2.2.0",
    "ninja",
    "pybind11>=2.10.0, <=2.13.6",
    "setuptools",
    "typing_extensions==4.12.2",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
enable = "cpython-prerelease cpython-freethreading"
build-frontend = "pip; args: --no-build-isolation"
environment = { PIP_FIND_LINKS = "wheelhouse https://github.com/makslevental/mlir-wheels/releases/expanded_assets/latest", PIP_NO_BUILD_ISOLATION = "false" }
build-verbosity = 3
before-all = [
    "rm -rf {project}/build",
    "rm -rf *egg*",
]
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64"
manylinux-x86_64-image = "ghcr.io/makslevental/manylinux_2_28_x86_64_cuda_12.3"

[tool.cibuildwheel.linux]
build = "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-* cp314-* cp314t-*"
skip = ["*-manylinux_i686", "*-musllinux*"]
environment-pass = [
    "BUILD_CUDA",
    "BUILD_AMDGPU",
    "CIBW_ARCHS",
    "CMAKE_ARGS",
    "CMAKE_GENERATOR",
    "HOST_CCACHE_DIR",
    "DATETIME",
    "LLVM_PROJECT_COMMIT",
    "MATRIX_OS",
    "MLIR_WHEEL_VERSION",
    "MLIR_INSTALL_ABS_PATH",
    "PIP_FIND_LINKS",
    "PIP_NO_BUILD_ISOLATION",
]
before-build = [
    "pip install -r build-requirements.txt",
    "{project}/scripts/docker_prepare_ccache.sh",
    "{project}/scripts/pip_install_mlir.sh",
]
repair-wheel-command = [
    'PLAT=$(python setup.py --plat)',
    'echo LD_LIBRARY_PATH=$LD_LIBRARY_PATH',
    'LD_LIBRARY_PATH=$(python -c "import mlir; print(mlir.__path__[0])")/lib',
    'auditwheel repair -w {dest_dir} {wheel} --exclude libcuda.so.1 --plat $PLAT',
    "pip uninstall -y mlir"
]

[tool.cibuildwheel.macos]
build = "cp310-* cp311-* cp312-* cp313-* cp314-* cp314t-*"
before-build = [
    "pip install -r build-requirements.txt",
    "{project}/scripts/pip_install_mlir.sh",
]
# DYLD_LIBRARY_PATH doesn't work because eg dep on libLLVM is set to @loader_path/libLLVM and
# delocate will not look in env paths in that case
# https://github.com/matthew-brett/delocate/blob/f6af44562dd90d0f9279ab77abeab607ee9c2ee0/delocate/libsana.py#L519
# https://github.com/matthew-brett/delocate/blob/f6af44562dd90d0f9279ab77abeab607ee9c2ee0/delocate/libsana.py#L592
# https://github.com/matthew-brett/delocate/blob/f6af44562dd90d0f9279ab77abeab607ee9c2ee0/delocate/tools.py#L784
repair-wheel-command = [
    # libmlir_float16 has a dep on libLLVM that's loader_path so it can't be found
    # libMLIRPythonCAPI has a dep on libLLVM that's rpath so that gets found correctly and gets put some place where it can be found
    # by default .dylibs so we are lucky - copy that to _mlir_libs so it can satisfy libmlir_float16
    # note, libs dir is relative to wheel dir not package as the docs imply
    # https://github.com/matthew-brett/delocate/blob/f6af44562dd90d0f9279ab77abeab607ee9c2ee0/delocate/delocating.py#L976
    # 'DYLD_LIBRARY_PATH=$(python -c "import mlir; print(mlir.__path__[0])")/lib',
    # --------
    # scratch all this and just copy libLLVM during build/install
    'delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}'
]

[tool.cibuildwheel.windows]
build = "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-* cp314-* cp314t-*"
before-build = [
    "pip install -r build-requirements.txt",
    "pip install delvewheel",
    "bash {project}\\scripts\\pip_install_mlir.sh",
]
#repair-wheel-command = 'delvewheel repair -v -w {dest_dir} {wheel} --no-dll mlirpythoncapi.dll'
